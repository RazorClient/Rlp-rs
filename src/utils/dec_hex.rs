fn decimals_to_hex(decimals: &[u32]) -> Vec<String> {
    decimals.iter().map(|&num| format!("{:#X}", num)).collect()
}

pub fn find_mismatches(left: &[u32], right: &[u32]) -> Result<(Vec<bool>, Vec<(u32, u32)>), String> {
    // Step 1: Check if the sizes match
    if left.len() != right.len() {
        return Err(format!(
            "Size mismatch: left has {} elements, right has {} elements",
            left.len(),
            right.len()
        ));
    }

    // Step 2: Initialize result arrays
    let mut mismatch_flags: Vec<bool> = vec![false; left.len()];
    let mut mismatch_values: Vec<(u32, u32)> = vec![(0, 0); left.len()];

    // Step 3: Compare element by element
    for (i, (&l, &r)) in left.iter().zip(right.iter()).enumerate() {
        if l != r {
            mismatch_flags[i] = true;
            mismatch_values[i] = (l, r); // Store the mismatched tuple
        }
    }

    // Step 4: Return the results
    Ok((mismatch_flags, mismatch_values))
}

fn main(){
    let left=vec![249, 2, 0, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118];
    let right=vec![248, 64, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118, 207, 132, 97, 115, 100, 102, 132, 113, 119, 101, 114, 132, 122, 120, 99, 118];


    let left_hex = decimals_to_hex(&left);
    let right_hex = decimals_to_hex(&right);

    println!("Left in Hex: {:?}", left_hex);
    println!("Right in Hex: {:?}", right_hex);
    match find_mismatches(&left, &right) {
        Ok((mismatch, values)) => {
            println!("Mismatch Flags: {:?}", mismatch);
            println!("Mismatch Values: {:?}", values);
        }
        Err(e) => {
            println!("Error: {}", e);
        }
    }
    
}